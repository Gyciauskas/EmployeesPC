@model Employees.Models.ViewModel
@{
    ViewBag.Title = "Update";
}

<div class="row">
    <div class="col-md-7">
        @using (Html.BeginForm(new { @class = "form-horizontal" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.SalaryOnPaper);
            <div class="form-horizontal">
                <h4>@Html.DisplayFor(model => model.Name) @Html.DisplayFor(model => model.LastName)</h4>
                <hr />
                <div class="form-group">
                    @Html.LabelFor(model => model.SalaryOnHands, new { @class = "control-label col-md-2" })
                    <div class="col-xs-3">
                        @Html.TextBoxFor(model => model.SalaryOnHands, new { @class = "form-control", @onchange = "myFunction(this.value)" }) 
                        @Html.ValidationMessageFor(model => model.SalaryOnHands)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
        <div>
            @Html.ActionLink("Back to List", "List")
        </div>
    </div>
    <div class="col-md-5">
        <h4>Salary details</h4>
        <hr />
        <div class="container">
            <table class="table">
                <tbody>
                    <tr class="success">
                        <td>Net salary</td>
                        <td id="netSalary"></td>
                    </tr>
                    <tr>
                        <td>NPD</td>
                        <td id="npd"></td>
                    </tr>
                    <tr>
                        <td>Incomes tax @System.Configuration.ConfigurationManager.AppSettings["incomeTax"]%</td>
                        <td id="incomeTax"></td>
                    </tr>
                    <tr>
                        <td>"Sodra" health insurance @System.Configuration.ConfigurationManager.AppSettings["healthInsurance"]%</td>
                        <td id="healthInsurance"></td>
                    </tr>
                    <tr>
                        <td>"Sodra" pension and social insurance @System.Configuration.ConfigurationManager.AppSettings["pensionInsurance"]%</td>
                        <td id="pensionInsurance"></td>
                    </tr>
                    <tr class="success">
                        <td>Gross salary</td>
                        <td id="grossSalary"></td>
                    </tr>
                    <tr>
                        <td>Employer taxes</td>
                    </tr>
                    <tr>
                        <td>"Sodra" @System.Configuration.ConfigurationManager.AppSettings["employerTax"]%</td>
                        <td id="employerTax" class="textright"></td>
                    </tr>
                    <tr class="success">
                        <td>Full work place cost</td>
                        <td id="fullCost"></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    // call a JavaScript function once the page has loaded
    window.onload = function () {
        myFunction(@Model.SalaryOnHands);
    };

    function myFunction(x) {
        var netSalary = parseFloat(x);
        var grossSalary;
        var mmaWage = parseFloat('@System.Configuration.ConfigurationManager.AppSettings["mmaWage"]');
        var baseNPD = parseFloat('@System.Configuration.ConfigurationManager.AppSettings["baseNPD"]');
        var incomeTax = parseFloat('@System.Configuration.ConfigurationManager.AppSettings["incomeTax"]') / 100;
        var healthInsurance = parseFloat('@System.Configuration.ConfigurationManager.AppSettings["healthInsurance"]') / 100;
        var pensionInsurance = parseFloat('@System.Configuration.ConfigurationManager.AppSettings["pensionInsurance"]') / 100;
        var employerTax = parseFloat('@System.Configuration.ConfigurationManager.AppSettings["employerTax"]') / 100;
        var npd = 0;

        //for case, then you couldn't update new salary and come back to page
        if (netSalary == null) {
            return;
        }

        if (netSalary <= 335.3) {
            if (netSalary == 0 || netSalary < 0) {
                grossSalary = 0;
                netSalary = 0;
            }
            else {
                grossSalary = (x - (incomeTax * baseNPD)) / (1 - (incomeTax + healthInsurance + pensionInsurance));
                npd = baseNPD;
            }
        }
        else if (netSalary <= 760) {
            grossSalary = (netSalary - (0.15 * (baseNPD + (mmaWage / 2)))) / (1 - ((incomeTax * 1.5) + healthInsurance + pensionInsurance));
            npd = baseNPD - 0.5 * (grossSalary - mmaWage);
        }
        else {
            grossSalary = netSalary / (1 - (incomeTax + healthInsurance + pensionInsurance));
            npd = 0;
        }

        document.getElementById("netSalary").innerHTML = netSalary.toFixed(2) + " €";
        document.getElementById("grossSalary").innerHTML = grossSalary.toFixed(2) + " €";
        document.getElementById("fullCost").innerHTML = (grossSalary + (grossSalary * employerTax)).toFixed(2) + " €";
        document.getElementById("employerTax").innerHTML = (grossSalary * employerTax).toFixed(2) + " €";

        // if gross salary equal or less 310eu, income taxes equal 0.
        if (netSalary <= 282.1)
            document.getElementById("incomeTax").innerHTML = 0;
        else
            document.getElementById("incomeTax").innerHTML = ((grossSalary - npd) * incomeTax).toFixed(2) + " €";

        document.getElementById("healthInsurance").innerHTML = (grossSalary * healthInsurance).toFixed(2) + " €";
        document.getElementById("pensionInsurance").innerHTML = (grossSalary * pensionInsurance).toFixed(2) + " €";
        document.getElementById("npd").innerHTML = npd.toFixed(2) + " €";
    }
</script>